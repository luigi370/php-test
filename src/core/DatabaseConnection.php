<?php

namespace src\core;

use Exception;
use PDO;
use PDOException;
use PDOStatement;

class DatabaseConnection {
    private string $host;
    private string $username;
    private string $password;
    private string $database;
    private string $charset;
    private PDO $pdo;

    /**
     * @throws Exception
     */
    public function __construct() {
        /* very bad to expose the database credentials in the code should be in a .env file and generated by the CI/CD
        pipeline taken from the secret vault */
        $this->host = 'db';
        $this->username = 'test_user';
        $this->password = 'test_password';
        $this->database = 'test_db';
        $this->charset = 'utf8mb4';

        $this->connect();
    }

    /**
     * @throws Exception
     */
    private function connect(): void
    {
        try {
            $dsn = "mysql:host={$this->host};dbname={$this->database};charset={$this->charset}";

            $options = [
                PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
                PDO::ATTR_EMULATE_PREPARES => false,
            ];

            $this->pdo = new PDO($dsn, $this->username, $this->password, $options);

        } catch (PDOException $e) {
            throw new Exception("Database connection failed: " . $e->getMessage());
        }
    }

    /**
     * @throws Exception
     */
    public function getConnection() {
        return $this->pdo;
    }

    public function executeQuery(string $sql, array $params = []): ?PDOStatement {
        try {
            $stmt = $this->getConnection()->prepare($sql);
            $stmt->execute($params);
            return $stmt;
        } catch (Exception $e) {
            throw new Exception("Query failed: " . $e->getMessage());
        }
    }
}